import streamlit as st
import yfinance as yf
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
from prophet import Prophet
from deepseek import get_deepseek_analysis
from external import get_ollama_insights
from plot import plot_interactive

st.title("Stock Predictor with deepseek-r1")

st.markdown(
    """
    <small><strong>Disclaimer:</strong> Insights provided by this tool, including dates and analysis, 
    are generated by AI and are based on available data and trained patterns. 
    This feature is still a work in progress, and accuracy is not guaranteed. 
    Please verify critical information from reliable sources before making decisions.</small>
    """,
    unsafe_allow_html=True
)

st.markdown("---")

symbols = st.text_input("Enter stock symbols (comma-separated):", "NVDA, TSLA")
days_back = st.number_input("Historical data range (days):", min_value=1, value=365)
days_to_predict = st.number_input("Forecast horizon (days):", min_value=1, value=30)

if st.button("Load Data and Predict"):
    try:
        symbols_list = [s.strip().upper() for s in symbols.split(",")]

        end_date = datetime.today()
        start_date = end_date - timedelta(days=days_back)

        # 1) Download data
        raw_data = yf.download(symbols_list, start=start_date, end=end_date)
        if raw_data.empty:
            st.warning("No data returned. Check symbols or date range.")
            st.stop()

        # Identify 'Adj Close' or 'Close'
        if isinstance(raw_data.columns, pd.MultiIndex):
            top_cols = raw_data.columns.levels[0]
            if 'Adj Close' in top_cols:
                stock_prices = raw_data['Adj Close']
            elif 'Close' in top_cols:
                stock_prices = raw_data['Close']
            else:
                st.error("Neither 'Adj Close' nor 'Close' found in data.")
                st.stop()
        else:
            if 'Adj Close' in raw_data.columns:
                stock_prices = raw_data['Adj Close']
            elif 'Close' in raw_data.columns:
                stock_prices = raw_data['Close']
            else:
                st.error("Neither 'Adj Close' nor 'Close' found in data.")
                st.stop()

        st.subheader("Latest Downloaded Data (Last 5 Rows)")
        st.dataframe(stock_prices.tail())

        # 2) Forecast per symbol
        for symbol in symbols_list:
            if symbol not in stock_prices.columns:
                st.warning(f"No data found for {symbol}.")
                continue

            st.markdown(f"## {symbol} Forecast")

            # Prepare prophet data
            df_sym = stock_prices[[symbol]].reset_index()
            df_sym.columns = ['ds', 'y']
            df_sym.dropna(inplace=True)
            df_sym['ds'] = pd.to_datetime(df_sym['ds'])

            if df_sym.empty:
                st.warning(f"No valid data for {symbol}. Skipping.")
                continue

            # External factor
            df_factors = get_ollama_insights(symbol, df_sym['ds'].min(), df_sym['ds'].max())
            df_merged = pd.merge(df_sym, df_factors, on='ds', how='left')

            model = Prophet(daily_seasonality=True, weekly_seasonality=True)
            model.add_regressor('external_factor')

            df_train = df_merged.dropna(subset=['external_factor', 'y'])
            if df_train.empty:
                st.warning(f"No overlapping data for {symbol}. Cannot forecast.")
                continue

            model.fit(df_train[['ds', 'y', 'external_factor']])

            future = model.make_future_dataframe(periods=days_to_predict, freq='D')
            last_factor = df_train['external_factor'].iloc[-1]
            future_factors = []
            for fdate in future['ds']:
                row = df_factors.loc[df_factors['ds'] == fdate]
                if not row.empty:
                    future_factors.append(row['external_factor'].values[0])
                else:
                    future_factors.append(last_factor)
            future['external_factor'] = future_factors

            forecast = model.predict(future)

            # Plot the forecast chart
            fig = plot_interactive(df_sym, symbol, forecast)
            st.plotly_chart(fig, use_container_width=True)

            st.write("Forecasted Data (Last 5 rows):")
            st.dataframe(forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail())

        # 3) Show Deepseek analysis with a loading spinner
        with st.spinner("Loading deepseek analysis..."):
            analysis_note = get_deepseek_analysis(symbol, df_sym['ds'].min(), df_sym['ds'].max())

        st.info(f"**Deepseek's Note for {symbol}:**\n{analysis_note}")

    except Exception as e:
        st.error(f"An error occurred: {e}")